// soc_system_trace_system_0.v

// This file was auto-generated from altera_trace_system_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module soc_system_trace_system_0 (
		input  wire        clk_clk,                 //       clk.clk
		output wire        reset_reset,             //     reset.reset
		output wire        capture_0_ready,         // capture_0.ready
		input  wire        capture_0_valid,         //          .valid
		input  wire [31:0] capture_0_data,          //          .data
		input  wire        capture_0_startofpacket, //          .startofpacket
		input  wire        capture_0_endofpacket,   //          .endofpacket
		input  wire [1:0]  capture_0_empty,         //          .empty
		output wire        control_0_write,         // control_0.write
		output wire        control_0_read,          //          .read
		output wire [5:0]  control_0_address,       //          .address
		output wire [31:0] control_0_writedata,     //          .writedata
		input  wire [31:0] control_0_readdata,      //          .readdata
		input  wire        control_0_waitrequest,   //          .waitrequest
		output wire        capture_1_ready,         // capture_1.ready
		input  wire        capture_1_valid,         //          .valid
		input  wire [31:0] capture_1_data,          //          .data
		input  wire        capture_1_startofpacket, //          .startofpacket
		input  wire        capture_1_endofpacket,   //          .endofpacket
		input  wire [1:0]  capture_1_empty,         //          .empty
		output wire        control_1_write,         // control_1.write
		output wire        control_1_read,          //          .read
		output wire [5:0]  control_1_address,       //          .address
		output wire [31:0] control_1_writedata,     //          .writedata
		input  wire [31:0] control_1_readdata,      //          .readdata
		input  wire        control_1_waitrequest,   //          .waitrequest
		output wire        capture_2_ready,         // capture_2.ready
		input  wire        capture_2_valid,         //          .valid
		input  wire [31:0] capture_2_data,          //          .data
		input  wire        capture_2_startofpacket, //          .startofpacket
		input  wire        capture_2_endofpacket,   //          .endofpacket
		input  wire [1:0]  capture_2_empty,         //          .empty
		output wire        control_2_write,         // control_2.write
		output wire        control_2_read,          //          .read
		output wire [5:0]  control_2_address,       //          .address
		output wire [31:0] control_2_writedata,     //          .writedata
		input  wire [31:0] control_2_readdata,      //          .readdata
		input  wire        control_2_waitrequest,   //          .waitrequest
		output wire        capture_3_ready,         // capture_3.ready
		input  wire        capture_3_valid,         //          .valid
		input  wire [31:0] capture_3_data,          //          .data
		input  wire        capture_3_startofpacket, //          .startofpacket
		input  wire        capture_3_endofpacket,   //          .endofpacket
		input  wire [1:0]  capture_3_empty,         //          .empty
		output wire        control_3_write,         // control_3.write
		output wire        control_3_read,          //          .read
		output wire [5:0]  control_3_address,       //          .address
		output wire [31:0] control_3_writedata,     //          .writedata
		input  wire [31:0] control_3_readdata,      //          .readdata
		input  wire        control_3_waitrequest    //          .waitrequest
	);

	wire        endpoint_h2t_valid;         // endpoint:h2t_valid -> tracesys:h2t_valid
	wire  [7:0] endpoint_h2t_data;          // endpoint:h2t_data -> tracesys:h2t_data
	wire        endpoint_h2t_ready;         // tracesys:h2t_ready -> endpoint:h2t_ready
	wire        endpoint_h2t_channel;       // endpoint:h2t_channel -> tracesys:h2t_channel
	wire        endpoint_h2t_startofpacket; // endpoint:h2t_startofpacket -> tracesys:h2t_startofpacket
	wire        endpoint_h2t_endofpacket;   // endpoint:h2t_endofpacket -> tracesys:h2t_endofpacket
	wire        tracesys_t2h_valid;         // tracesys:t2h_valid -> endpoint:t2h_valid
	wire  [7:0] tracesys_t2h_data;          // tracesys:t2h_data -> endpoint:t2h_data
	wire        tracesys_t2h_ready;         // endpoint:t2h_ready -> tracesys:t2h_ready
	wire  [0:0] tracesys_t2h_channel;       // tracesys:t2h_channel -> endpoint:t2h_channel
	wire        tracesys_t2h_startofpacket; // tracesys:t2h_startofpacket -> endpoint:t2h_startofpacket
	wire        tracesys_t2h_endofpacket;   // tracesys:t2h_endofpacket -> endpoint:t2h_endofpacket

	soc_system_trace_system_0_tracesys #(
		.WAKE_UP_MODE            ("IDLE"),
		.PERIODIC_TS_REQ_STARTUP (0)
	) tracesys (
		.clk_clk                 (clk_clk),                    //           clk.clk
		.reset_reset             (reset_reset),                //         reset.reset
		.debug_reset_reset       (),                           //   debug_reset.reset
		.h2t_ready               (endpoint_h2t_ready),         //           h2t.ready
		.h2t_valid               (endpoint_h2t_valid),         //              .valid
		.h2t_startofpacket       (endpoint_h2t_startofpacket), //              .startofpacket
		.h2t_endofpacket         (endpoint_h2t_endofpacket),   //              .endofpacket
		.h2t_data                (endpoint_h2t_data),          //              .data
		.h2t_channel             (endpoint_h2t_channel),       //              .channel
		.t2h_ready               (tracesys_t2h_ready),         //           t2h.ready
		.t2h_valid               (tracesys_t2h_valid),         //              .valid
		.t2h_startofpacket       (tracesys_t2h_startofpacket), //              .startofpacket
		.t2h_endofpacket         (tracesys_t2h_endofpacket),   //              .endofpacket
		.t2h_data                (tracesys_t2h_data),          //              .data
		.t2h_channel             (tracesys_t2h_channel),       //              .channel
		.capture_0_ready         (capture_0_ready),            //     capture_0.ready
		.capture_0_valid         (capture_0_valid),            //              .valid
		.capture_0_data          (capture_0_data),             //              .data
		.capture_0_startofpacket (capture_0_startofpacket),    //              .startofpacket
		.capture_0_endofpacket   (capture_0_endofpacket),      //              .endofpacket
		.capture_0_empty         (capture_0_empty),            //              .empty
		.control_0_write         (control_0_write),            //     control_0.write
		.control_0_read          (control_0_read),             //              .read
		.control_0_address       (control_0_address),          //              .address
		.control_0_writedata     (control_0_writedata),        //              .writedata
		.control_0_readdata      (control_0_readdata),         //              .readdata
		.control_0_waitrequest   (control_0_waitrequest),      //              .waitrequest
		.debug_reset_0_reset     (),                           // debug_reset_0.reset
		.capture_1_ready         (capture_1_ready),            //     capture_1.ready
		.capture_1_valid         (capture_1_valid),            //              .valid
		.capture_1_data          (capture_1_data),             //              .data
		.capture_1_startofpacket (capture_1_startofpacket),    //              .startofpacket
		.capture_1_endofpacket   (capture_1_endofpacket),      //              .endofpacket
		.capture_1_empty         (capture_1_empty),            //              .empty
		.control_1_write         (control_1_write),            //     control_1.write
		.control_1_read          (control_1_read),             //              .read
		.control_1_address       (control_1_address),          //              .address
		.control_1_writedata     (control_1_writedata),        //              .writedata
		.control_1_readdata      (control_1_readdata),         //              .readdata
		.control_1_waitrequest   (control_1_waitrequest),      //              .waitrequest
		.debug_reset_1_reset     (),                           // debug_reset_1.reset
		.capture_2_ready         (capture_2_ready),            //     capture_2.ready
		.capture_2_valid         (capture_2_valid),            //              .valid
		.capture_2_data          (capture_2_data),             //              .data
		.capture_2_startofpacket (capture_2_startofpacket),    //              .startofpacket
		.capture_2_endofpacket   (capture_2_endofpacket),      //              .endofpacket
		.capture_2_empty         (capture_2_empty),            //              .empty
		.control_2_write         (control_2_write),            //     control_2.write
		.control_2_read          (control_2_read),             //              .read
		.control_2_address       (control_2_address),          //              .address
		.control_2_writedata     (control_2_writedata),        //              .writedata
		.control_2_readdata      (control_2_readdata),         //              .readdata
		.control_2_waitrequest   (control_2_waitrequest),      //              .waitrequest
		.debug_reset_2_reset     (),                           // debug_reset_2.reset
		.capture_3_ready         (capture_3_ready),            //     capture_3.ready
		.capture_3_valid         (capture_3_valid),            //              .valid
		.capture_3_data          (capture_3_data),             //              .data
		.capture_3_startofpacket (capture_3_startofpacket),    //              .startofpacket
		.capture_3_endofpacket   (capture_3_endofpacket),      //              .endofpacket
		.capture_3_empty         (capture_3_empty),            //              .empty
		.control_3_write         (control_3_write),            //     control_3.write
		.control_3_read          (control_3_read),             //              .read
		.control_3_address       (control_3_address),          //              .address
		.control_3_writedata     (control_3_writedata),        //              .writedata
		.control_3_readdata      (control_3_readdata),         //              .readdata
		.control_3_waitrequest   (control_3_waitrequest),      //              .waitrequest
		.debug_reset_3_reset     ()                            // debug_reset_3.reset
	);

	altera_avalon_st_debug_agent_endpoint_wrapper #(
		.DATA_WIDTH     (8),
		.CHANNEL_WIDTH  (1),
		.HAS_MGMT       (0),
		.READY_LATENCY  (0),
		.MFR_CODE       (110),
		.TYPE_CODE      (261),
		.PREFER_HOST    (""),
		.CLOCK_RATE_CLK (130000000)
	) endpoint (
		.clk               (clk_clk),                    //   clk.clk
		.reset             (reset_reset),                // reset.reset
		.h2t_ready         (endpoint_h2t_ready),         //   h2t.ready
		.h2t_valid         (endpoint_h2t_valid),         //      .valid
		.h2t_data          (endpoint_h2t_data),          //      .data
		.h2t_startofpacket (endpoint_h2t_startofpacket), //      .startofpacket
		.h2t_endofpacket   (endpoint_h2t_endofpacket),   //      .endofpacket
		.h2t_channel       (endpoint_h2t_channel),       //      .channel
		.t2h_ready         (tracesys_t2h_ready),         //   t2h.ready
		.t2h_valid         (tracesys_t2h_valid),         //      .valid
		.t2h_data          (tracesys_t2h_data),          //      .data
		.t2h_startofpacket (tracesys_t2h_startofpacket), //      .startofpacket
		.t2h_endofpacket   (tracesys_t2h_endofpacket),   //      .endofpacket
		.t2h_channel       (tracesys_t2h_channel),       //      .channel
		.h2t_empty         (),                           // (terminated)
		.t2h_empty         (1'b0),                       // (terminated)
		.mgmt_valid        (),                           // (terminated)
		.mgmt_data         (),                           // (terminated)
		.mgmt_channel      ()                            // (terminated)
	);

endmodule
